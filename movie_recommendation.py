# -*- coding: utf-8 -*-
"""Movie Recommendation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19ZCw1nLs0vthkBnq8deOkwhtO6LS6l9r

Import Library
"""

import pandas as pd
import numpy as np

"""Import Dataset"""

df = pd.read_csv(r"https://raw.githubusercontent.com/YBIFoundation/Dataset/main/Movies%20Recommendation.csv")

df.head()

df.info()

df.shape

df.columns

df_features = df[['Movie_Genre', 'Movie_Keywords', 'Movie_Tagline', 'Movie_Cast', 'Movie_Director']].fillna('')

df_features.shape

df_features

X = df_features['Movie_Genre'] + ' ' + df_features['Movie_Keywords'] + ' ' + df_features['Movie_Tagline'] + df_features['Movie_Cast'] + df_features['Movie_Director']

X.shape

from sklearn.feature_extraction.text import TfidfVectorizer

tfidf = TfidfVectorizer()

X = tfidf.fit_transform(X)

X.shape

print(X)

from sklearn.metrics.pairwise import cosine_similarity

Similarity_Score = cosine_similarity(X)

Similarity_Score

Similarity_Score.shape

Favorite_movie = input('Enter movie name : ')

All_Movie_List = df['Movie_Title'].tolist()

import difflib

Movie_recommendation = difflib.get_close_matches(Favorite_movie, All_Movie_List)
print(Movie_recommendation)

Close_match = Movie_recommendation[0]
print(Close_match)

Index = df[df.Movie_Title == Close_match]['Movie_ID'].values[0]
print(Index)

Recommendation_score = list(enumerate(Similarity_Score[Index]))
print(Recommendation_score)

len(Recommendation_score)

Sorted_Similar_Movies = sorted(Recommendation_score, key = lambda x:x[1], reverse = True)
print(Sorted_Similar_Movies)

print('Top 30 movies suggested for you : \n')
i = 1
for movie in Sorted_Similar_Movies:
  index = movie[0]
  title_from_index = df[df.index == index]['Movie_Title'].values[0]
  if(i<31):
    print(i, '.', title_from_index)
    i+=1

movie_name = input('enter movie name : \n')
list_titles = df['Movie_Title'].tolist()
find_close_match = difflib.get_close_matches(movie_name, list_titles)
Close_Match = find_close_match[0]
Index_of_Movie = df[df.Movie_Title==Close_Match]['Movie_ID'].values[0]
Recommendation_score = list(enumerate(Similarity_Score[Index_of_Movie]))
sorted_similar_movies = sorted(Recommendation_score, key = lambda x:x[1], reverse=True)
print('Top 10 movies suggested to you : \n')

i = 1
for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = df[df.index == index]['Movie_Title'].values
  if(i<11):
    print(i, '.', title_from_index)
    i+=1





